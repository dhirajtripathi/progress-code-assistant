import streamlit as st

import google.generativeai as genai
import yaml
import os

from langchain.schema import SystemMessage, HumanMessage
import json

# Load API key
G_API_KEY= "your key"
#A..js
#sp_var = "IzaSyBQmEldQBkdJ9QDszc-NdFYvl_3VGAEs"
genai.configure(api_key=G_API_KEY)  
model = genai.GenerativeModel("gemini-1.5-flash")

def convert_openapi_2_to_3(openapi_2_yaml):
    """Uses Gemini to convert OpenAPI 2 spec to OpenAPI 3"""
    model = genai.GenerativeModel("gemini-1.5-flash")
    prompt = f"Convert this OpenAPI 2 YAML spec to OpenAPI 3 JSON spec:\n\n{openapi_2_yaml}"
    response = model.generate_content(prompt)
    return response.text

def generate_microservice(openapi_3_json):
    """Uses Gemini to generate Spring Boot microservice"""
    #model = genai.GenerativeModel("gemini-pro")
    prompt = f"Generate a Spring Boot microservice based on this OpenAPI 3 spec:\n\n{openapi_3_json}"
    response = model.generate_content(prompt)
    return response.text

def generate_unit_tests(microservice_code):
    """Uses Gemini to generate JUnit test cases for Spring Boot"""
    #model = genai.GenerativeModel("gemini-pro")
    prompt = f"Generate JUnit test cases for the following Spring Boot microservice:\n\n{microservice_code}"
    response = model.generate_content(prompt)
    return response.text

def generate_boomi_flow(openapi_json):
    """Generate Dell Boomi process XML/JSON from OpenAPI 3."""
    prompt = f"""
    Generate a Dell Boomi integration flow definition (JSON/XML) based on the following OpenAPI 3 specification:
    ```json
    {json.dumps(openapi_json, indent=2)}
    ```
    """
    response = model.generate_content(prompt)
    return response.text

st.set_page_config(page_title="API Migration Tool", layout="wide")
microservice_code = ""
# Create three tabs
tab1, tab2, tab3, tab4 = st.tabs(["OpenAPI 2 to OpenAPI 3", "Generate Microservices", "Generate Unit Tests", "Generate Dell Boomi Flow"])

with tab1:
    st.header("Convert OpenAPI 2 (Swagger) to OpenAPI 3")
    uploaded_file = st.file_uploader("Upload OpenAPI 2 YAML file", type=["yaml", "yml"])
    if uploaded_file:
        st.write("File uploaded successfully!")
        openapi_2_spec = uploaded_file.read().decode("utf-8")
        openapi_3_spec = convert_openapi_2_to_3(openapi_2_spec)
        
        st.text_area("Converted OpenAPI 3 Specification", openapi_3_spec, height=300)
        st.download_button("Download OpenAPI 3 Spec", openapi_3_spec, file_name="openapi_3.json")        
            # Process conversion here

with tab2:
    st.header("Generate Spring Boot Microservices")
    if uploaded_file and st.button("Generate Microservice"):
        st.write("Generating Microservice...")
        microservice_code = generate_microservice(openapi_3_spec)
        
        st.text_area("Spring Boot Microservice", microservice_code, height=400)
        st.download_button("Download Microservice Code", microservice_code, file_name="microservice.zip")

with tab3:
    if uploaded_file and st.button("Generate Unit Tests"):
        st.write("Generating Unit Tests...")
        print(microservice_code)
        unit_tests = generate_unit_tests(microservice_code)
        
        st.text_area("JUnit Test Cases", unit_tests, height=400)
        st.download_button("Download Unit Tests", unit_tests, file_name="unit_tests.java")

with tab4:
    st.header("Generate Dell Boomi Integration Flow")
    uploaded_openapi = st.file_uploader("Upload OpenAPI 3 JSON", type=["json"], key="openapi3")
    if uploaded_openapi:
        openapi_json = json.load(uploaded_openapi)
        boomi_flow = generate_boomi_flow(openapi_json)
        st.text_area("Generated Boomi Flow", boomi_flow, height=300)
        st.download_button("Download Boomi Flow", boomi_flow, file_name="boomi_flow.json")


===================================================openapi2.yaml===========================================================
==========================================================================================================================
swagger: "2.0"
info:
  version: "1.0.0"
  title: "User Management API"
  description: "A simple API to manage users."

host: "api.example.com"
basePath: "/v1"
schemes:
  - "https"

paths:
  /users:
    get:
      summary: "Get a list of users"
      description: "Returns a list of users."
      produces:
        - "application/json"
      responses:
        "200":
          description: "Successful response"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"

    post:
      summary: "Create a new user"
      description: "Creates a new user and returns the created user."
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "201":
          description: "User created successfully"
          schema:
            $ref: "#/definitions/User"

  /users/{userId}:
    get:
      summary: "Get user by ID"
      description: "Returns a single user based on the provided ID."
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: "string"
      responses:
        "200":
          description: "Successful response"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"

    delete:
      summary: "Delete a user"
      description: "Deletes a user by ID."
      parameters:
        - name: "userId"
          in: "path"
          required: true
          type: "string"
      responses:
        "204":
          description: "User deleted successfully"
        "404":
          description: "User not found"

definitions:
  User:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      email:
        type: "string"




===================================================openapi3.json===========================================================
==========================================================================================================================

{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "User Management API",
    "description": "A simple API to manage users."
  },
  "servers": [
    {
      "url": "https://api.example.com/v1",
      "description": "Production Server"
    }
  ],
  "paths": {
    "/users": {
      "get": {
        "summary": "Get a list of users",
        "description": "Returns a list of users.",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "summary": "Create a new user",
        "description": "Creates a new user and returns the created user.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "summary": "Get user by ID",
        "description": "Returns a single user based on the provided ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a user",
        "description": "Deletes a user by ID.",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      }
    }
  }
}
